!<arch>
0-isupper.c/    1688731488  1000  1000  100664  260       `
#include "main.h"

/**
 * _isupper - checks for uppercase character
 * @c: character to be checked
 * Return: 1 if uppercase, 0 otherwise
 */

int _isupper(int c)
{
	char ch;

	for (ch = 'A'; ch <= 'Z'; ch++)
	{
		if (c == ch)
			return (1);
	}
	return (0);
}
0-memset.c/     1688731775  1000  1000  100664  305       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 * @s: memory area
 * @b: constant bye
 * @n: n bytes of the memory
 * Return: pointer to memory area s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}

0-strcat.c/     1688732037  1000  1000  100664  368       `
#include "main.h"

/**
 * _strcat - appends the src string to the dest string
 * @dest: dest string
 * @src: src string
 * Return: pointer to resulting string dest
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	while (dest[i] != '\0')
		i++;
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';

	return (dest);
}
100-atoi.c/     1688732649  1000  1000  100664  538       `
#include "main.h"

/**
 * _atoi - converts string to integer
 * @s: string
 * Return: int
 */

int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;
		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}
	if (f == 0)
		return (0);
	return (n);
}
1-isdigit.c/    1688731507  1000  1000  100664  187       `
#include "main.h"

/**
 * _isdigit - checks for a digit
 * @c: input
 * Return: 1 if digit, 0 otherwise
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	return (0);
}

1-memcpy.c/     1688731775  1000  1000  100664  307       `
#include "main.h"

/**
 * _memcpy - copies memory area
 * @dest: destination memory area
 * @src: source memory area
 * @n: n bytes
 * Return: pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}

1-strncat.c/    1688732037  1000  1000  100664  401       `
#include "main.h"

/**
 * _strncat - concatenates n bytes from src to dest
 * @dest: pointer to original string
 * @src: pointer to src
 * @n: n bytes
 * Return: pointer to dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	while (dest[i] != '\0')
		i++;

	j = 0;

	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';

	return (dest);
}

2-strchr.c/     1688731775  1000  1000  100664  282       `
#include "main.h"

/**
 * _strchr - locates a character in a string
 * @s: string
 * @c: character
 * Return: pointer to first occurrence or NULL
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}
2-strlen.c/     1688732649  1000  1000  100664  202       `
#include "main.h"

/**
 * _strlen - returns length of a string
 * @s: pointer to string
 * Return: length
 */

int _strlen(char *s)
{
	int i = 0;

	while (*s != '\0')
	{
		i++;
		s++;
	}
	return (i);
}
2-strncpy.c/    1688732037  1000  1000  100664  381       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: pointer to destination
 * @src: pointer to source
 * @n: number of bytes
 * Return: pointer to result string
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n; i++)
	{
		if (src[i] == '\0')
			break;
		dest[i] = src[i];
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}

3-islower.c/    1688732748  1000  1000  100664  221       `
#include "main.h"

/**
 *_islower - check if character is lower case
 * @c: characted to checked
 * Return: 1 if lowercase, else 0
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       1688732649  1000  1000  100664  169       `
#include "main.h"

/**
 * _puts - prints a string
 * @str: string
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.c/     1688732037  1000  1000  100664  295       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 * Return: s1[i] - s2[i]
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
		i++;
	}

	return (0);
}

3-strspn.c/     1688731775  1000  1000  100664  411       `
#include "main.h"

/**
 * _strspn - gets length of a prefix substring
 * @s: string
 * @accept: bytes
 * Return: length
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, j;
	unsigned int n = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				n++;
				break;
			}
			else if (accept[j + 1] == '\0')
				return (n);
		}
	}

	return (n);
}

4-isalpha.c/    1688732748  1000  1000  100664  254       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 * @c: character to be checked
 * Return: 1 if c is a letter, 0 otherwise
 */

int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	return (0);
}
4-strpbrk.c/    1688731775  1000  1000  100664  348       `
#include "main.h"
/**
 * _strpbrk - searches a string for any set of bytes
 * @s: string s
 * @accept: input
 * Return: pointer to the byte in s
 */

char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
				return (&s[i]);
		}
	}

	return (0);
}
5-strstr.c/     1688731775  1000  1000  100664  444       `
#include "main.h"
/**
 * _strstr - find first ocurrence of substring needle in string haystack
 * @haystack: string
 * @needle: substring
 * Return: pointer to beginning of located substring
 */

char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}

		if (*p == '\0')
			return (haystack);
	}

	return (0);
}
6-abs.c/        1688732748  1000  1000  100664  160       `
#include "main.h"

/**
 * _abs - computes integer
 * @n: integer
 * Return: absolute value
 */

int _abs(int n)
{
	if (n < 0)
		return (-1 * n);
	return (n);
}
9-strcpy.c/     1688732649  1000  1000  100664  306       `
#include "main.h"

/**
 * _strcpy - copies the string
 * @dest: buffer
 * @src: string
 * Return: pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int l = 0;
	int x = 0;

	while (*(src + l) != '\0')
		l++;
	for (; x < l; x++)
		*(dest + x) = *(src + x);
	*(dest + l) = '\0';

	return (dest);
}
main.c/         1688733129  1000  1000  100664  148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     1688731288  1000  1000  100664  247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

